// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?
  githubId      String?        @unique
  googleId      String?        @unique
  twitterId     String?        @unique
  walletAddress String?        @unique
  capsules      Capsule[]
  memberships   Membership[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Capsule {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  content     String
  triggerType String
  conditions  Json
  trigger     Trigger?
  recipients  Recipient[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Trigger {
  id          String   @id @default(uuid())
  capsuleId   String   @unique
  capsule     Capsule  @relation(fields: [capsuleId], references: [id])
  type        String
  conditions  Json
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Recipient {
  id        String   @id @default(uuid())
  capsuleId String
  capsule   Capsule  @relation(fields: [capsuleId], references: [id])
  email     String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id            String       @id @default(uuid())
  name          String
  type          String       // 'root', 'family', 'group', 'institution'
  description   String?
  profilePicture String?
  website       String?
  parentOrgId   String?      // For hierarchical organizations
  parentOrg     Organization? @relation("OrgHierarchy", fields: [parentOrgId], references: [id])
  childOrgs     Organization[] @relation("OrgHierarchy")
  memberships   Membership[]
  invitations   Invitation[]
  verifications Verification[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Role {
  id          String       @id @default(uuid())
  name        String       // 'creator', 'recipient', 'verifier', 'admin'
  permissions Json
  memberships Membership[]
  invitations Invitation[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([name])
}

model Membership {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  roleId         String
  role           Role         @relation(fields: [roleId], references: [id])
  status         String       // 'active', 'inactive', 'suspended'
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

model Invitation {
  id             String       @id @default(uuid())
  email          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  roleId         String
  role           Role         @relation(fields: [roleId], references: [id])
  token          String       @unique
  status         String       // 'pending', 'accepted', 'expired'
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Verification {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  type           String       // 'domain', 'document', 'legal'
  status         String       // 'pending', 'approved', 'rejected'
  data           Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
